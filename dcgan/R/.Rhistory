dev.off()
pdf("ad_curves.pdf", width=6, height=2.5)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves("valid_xent", "valid x-ent", "topright")
ad.curves("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
pdf("ad_curves.pdf", width=6, height=2.2)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves("valid_xent", "valid x-ent", "topright")
ad.curves("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
ad.curves = function(coln, ylab, legend.where) {
plot(get.loess(afx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(afx.pois.t1.0[coln][,1]),col=preset.cols[2], lwd=1.5); lines(afx.pois.t1.0[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(afemd2.t1.0[coln][,1]),col=preset.cols[3], lwd=1.5); lines(afemd2.t1.0[coln][,1],col=preset.cols.alpha[3])
legend(legend.where,
legend=c("x-ent (tau=1)","x-ent + pois (tau=1)", "emd2 + pois (tau=1)"),
col=preset.cols[1:3],lty="solid",lwd=1.5,bty="n",cex=0.5)
}
pdf("ad_curves.pdf", width=6, height=2.2)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves("valid_xent", "valid x-ent", "topright")
ad.curves("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
afemd2.t0.3 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/adience_pois_t-0.3_emd2_l2-1e-4_sgd_pre_split_hdf5/results.txt")
afemd2.t0.3 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/adience_pois_t-0.3_emd2_l2-1e-4_sgd_pre_split_hdf5/results.txt")
ad.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(afx.t0.3[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(afx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(afx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(afx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(afemd2.t1.0[coln][,1]),col=preset.cols[3], lwd=1.5); lines(afemd2.t1.0[coln][,1],col=preset.cols.alpha[3])
legend(legend.where,
legend=c("x-ent","x-ent + pois (tau=0.3)", "emd2 + pois (tau=0.3) (TODO)"),
col=preset.cols[1:4],lty="solid",lwd=1.5,bty="n",cex=0.5)
}
pdf("ad_curves_2.pdf", width=6, height=2)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.2("valid_xent", "valid x-ent", "topright")
ad.curves.2("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.2("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
ad.curves.3 = function(coln, ylab, legend.where) {
#plot(get.loess(afx.pois.lt[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx.pois.lt[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(afx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(afx.pois.lt[coln][,1]),col=preset.cols[2], lwd=1.5); lines(afx.pois.lt[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(afemd2.pois.lt[coln][,1]),col=preset.cols[3], lwd=1.5); lines(afemd2.pois.lt[coln][,1],col=preset.cols.alpha[3])
#legend(legend.where,
#       legend=c("x-ent","x-ent + pois (tau=1)", "emd2 + pois (tau=1)", "x-ent + pois (tau=0.3)"),
#       col=preset.cols[1:4],lty="solid",lwd=1.5,bty="n",cex=0.5)
}
fig.height=2.1
fig.width=6
pdf("ad_curves.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves("valid_xent", "valid x-ent", "topright")
ad.curves("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
pdf("ad_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.2("valid_xent", "valid x-ent", "topright")
ad.curves.2("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.2("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
pdf("ad_curves_3.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.3("valid_xent", "valid x-ent", "topright")
ad.curves.3("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.3("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
ad.curves.3 = function(coln, ylab, legend.where) {
#plot(get.loess(afx.pois.lt[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx.pois.lt[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(afx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(afx.pois.lt[coln][,1]),col=preset.cols[2], lwd=1.5); lines(afx.pois.lt[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(afemd2.pois.lt[coln][,1]),col=preset.cols[3], lwd=1.5); lines(afemd2.pois.lt[coln][,1],col=preset.cols.alpha[3])
legend(legend.where,
legend=c("x-ent (tau=1)","x-ent + pois (tau=learn)", "emd2 + pois (tau=learn)"),
col=preset.cols[1:4],lty="solid",lwd=1.5,bty="n",cex=0.5)
}
pdf("ad_curves_3.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.3("valid_xent", "valid x-ent", "topright")
ad.curves.3("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.3("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
afemd2.pois.lt
dfx =read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_xent_l2-1e-4_sgd_pre_split_hdf5/results.txt")
dfx.pois.t1.0 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-1_xent_l2-1e-4_sgd_pre_split_hdf5_dlra100//results.txt")
dfx.t0.3 =read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_xent_tau-0.3_l2-1e-4_sgd_pre_split_hdf5_dlra100//results.txt")
dfx.pois.t0.3 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-0.3_xent_l2-1e-4_sgd_pre_split_hdf5_dlra100/results.txt")
dfemd2.pois.t1.0 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-1_emd2_l2-1e-4_sgd_pre_split_hdf5_dlra100/results.txt")
dfx.pois.t0.5 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-0.5_xent_l2-1e-4_sgd_pre_split_hdf5/results.txt")
dfemd2.pois.t0.3 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-0.3_emd2_l2-1e-4_sgd_pre_split_hdf5/results.txt")
dfx.pois.lt = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-learnsig_xent_l2-1e-4_sgd_pre_split_hdf5/results.txt")
dfemd2.pois.lt = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/dr_pois_t-learnsig_emd2_l2-1e-4_sgd_pre_split_hdf5/results.txt")
pdf("dr_curves.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
labels = c("x-ent (tau=1)", "x-ent/pois (tau=1)", "emd2/pois (tau=1)")
# x-ent (tau=1) vs x-ent/pois (tau=1) vs emd2/pois (tau=1)
dr.curves = function(coln, ylab, legend.where) {
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t1.0[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t1.0[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.t1.0[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t1.0[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 1)", "x-ent + pois (tau = 1.0)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves("valid_xent", "valid x-ent","topright")
dr.curves("valid_xent_accuracy", "valid acc","bottomright")
dr.curves("valid_xent_qwk", "valid qwk","bottomright")
dev.off()
pdf("dr_curves.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
labels = c("x-ent (tau=1)", "x-ent/pois (tau=1)", "emd2/pois (tau=1)")
# x-ent (tau=1) vs x-ent/pois (tau=1) vs emd2/pois (tau=1)
dr.curves = function(coln, ylab, legend.where) {
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t1.0[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t1.0[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.t1.0[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t1.0[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 1)", "x-ent + pois (tau = 1)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves("valid_xent", "valid x-ent","topright")
dr.curves("valid_xent_accuracy", "valid acc","bottomright")
dr.curves("valid_xent_qwk", "valid qwk","bottomright")
dev.off()
pdf("dr_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
# x-ent (tau=1.0) vs x-ent/pois (tau=0.3) vs emd2/pois
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright")
dev.off()
dfemd2.pois.t0.3
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
pdf("dr_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
# x-ent (tau=1.0) vs x-ent/pois (tau=0.3) vs emd2/pois
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright")
dev.off()
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.t0.3[coln][,1],span=0.01),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dfemd2.pois.t0.3
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
pdf("dr_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
# x-ent (tau=1.0) vs x-ent/pois (tau=0.3) vs emd2/pois
dr.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright")
dev.off()
dr.curves.2("valid_xent_qwk","valid qwk","bottomright")
?plot
dr.curves.2 = function(coln, ylab, legend.where, ylim=NULL) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylim=ylim, ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright",ylim=c(0.1,0.8))
dr.curves.2("valid_xent_qwk","valid qwk","bottomright",ylim=c(0.1,0.7))
pdf("dr_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
# x-ent (tau=1.0) vs x-ent/pois (tau=0.3) vs emd2/pois
dr.curves.2 = function(coln, ylab, legend.where, ylim=NULL) {
#plot(get.loess(dfx.t0.3[coln][,1]),col=preset.cols[1], xlim=c(0,150), lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylim=ylim, ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
#lines(get.loess(dfemd2.pois.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.t0.3[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = 0.3)", "x-ent + pois (tau = 0.3)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.2("valid_xent","valid x-ent","topright")
dr.curves.2("valid_xent_accuracy","valid acc","bottomright")
dr.curves.2("valid_xent_qwk","valid qwk","bottomright",ylim=c(0.1,0.7))
dev.off()
pdf("dr_curves_3.pdf", width=6, height=2)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
dr.curves.3= function(coln, ylab, legend.where) {
plot(get.loess(dfx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(dfx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(dfx.pois.lt[coln][,1]),col=preset.cols[2], lwd=1.5); lines(dfx.pois.lt[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(dfemd2.pois.lt[coln][,1]),col=preset.cols[3], lwd=1.5); lines(dfemd2.pois.lt[coln][,1],col=preset.cols.alpha[3])
legend(legend.where, legend=c("x-ent (tau = 1)", "x-ent + pois (tau = learn)", "x-ent + pois (tau = learn)"), col=preset.cols[1:3], lty="solid", lwd=1.5, cex=0.5)
}
dr.curves.3("valid_xent","valid x-ent","topright")
dr.curves.3("valid_xent_accuracy","valid acc","bottomright")
dr.curves.3("valid_xent_qwk","valid qwk","bottomright")
dev.off()
afemd2.t1.0
afemd2.t0.3
afemd2.t0.3 = read.csv("~/Desktop/lisa_tmp4_4/msc/experiments/earth_mover/output/adience_pois_t-0.3_emd2_l2-1e-4_sgd_pre_split_hdf5/results.txt")
afemd2.t0.3
ad.curves.2 = function(coln, ylab, legend.where) {
#plot(get.loess(afx.t0.3[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx.t0.3[coln][,1],col=preset.cols.alpha[1])
plot(get.loess(afx[coln][,1]),col=preset.cols[1], lwd=1.5, type="l", xlab="epoch", ylab=ylab); lines(afx[coln][,1],col=preset.cols.alpha[1])
lines(get.loess(afx.pois.t0.3[coln][,1]),col=preset.cols[2], lwd=1.5); lines(afx.pois.t0.3[coln][,1],col=preset.cols.alpha[2])
lines(get.loess(afemd2.t0.3[coln][,1]),col=preset.cols[3], lwd=1.5); lines(afemd2.t1.0[coln][,1],col=preset.cols.alpha[3])
legend(legend.where,
legend=c("x-ent","x-ent + pois (tau=0.3)", "emd2 + pois (tau=0.3) (TODO)"),
col=preset.cols[1:4],lty="solid",lwd=1.5,bty="n",cex=0.5)
}
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.2("valid_xent", "valid x-ent", "topright")
ad.curves.2("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.2("valid_xent_qwk", "valid qwk", "bottomright")
pdf("ad_curves_2.pdf", width=fig.width, height=fig.height)
par(mfrow=c(1,3))
par(mar=c(5,4,1,1)+0.1)
ad.curves.2("valid_xent", "valid x-ent", "topright")
ad.curves.2("valid_xent_accuracy", "valid acc", "bottomright")
ad.curves.2("valid_xent_qwk", "valid qwk", "bottomright")
dev.off()
dfx
dfx.pois.lt
dfemd2.pois.lt
# 20 classes and tau=1.0
steps = seq(from=1,to=10,by=0.5)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),1.0)
barplot(res,names.arg=1:8,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=10,by=0.5)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),1.0)
barplot(res,names.arg=1:20,main=x)
}
steps = seq(from=1,to=20,by=1)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),1.0)
barplot(res,names.arg=1:20,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=20,by=1)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=5),1.0)
barplot(res,names.arg=1:5,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=20,by=1)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=4),1.0)
barplot(res,names.arg=1:4,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=40,by=2)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=4),1.0)
barplot(res,names.arg=1:4,main=x)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),0.3)
barplot(res,names.arg=1:4)
}
get.fxs = function(fx, num.classes=4) {
c = 1:num.classes
cf = factorial(c)
return(c*log(fx) - fx - log(cf))
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),1.0)
barplot(res,names.arg=1:4)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),0.3)
barplot(res,names.arg=1:4)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),1.0)
barplot(res,names.arg=1:4)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),1.0)
barplot(res,names.arg=1:4)
}
steps = seq(from=1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),1.0)
barplot(res,names.arg=1:20,main=x)
}
steps = seq(from=1,to=40,by=2)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),1.0)
barplot(res,names.arg=1:20,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=40,by=2)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),0.5)
barplot(res,names.arg=1:20,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=40,by=2)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),0.1)
barplot(res,names.arg=1:20,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=20,by=1)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),0.1)
barplot(res,names.arg=1:20,main=x)
}
# 20 classes and tau=1.0
steps = seq(from=1,to=20,by=1)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x, num.classes=20),0.5)
barplot(res,names.arg=1:20,main=x)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),1.0)
barplot(res,names.arg=1:4)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),0.3)
barplot(res,names.arg=1:4)
}
steps = seq(from=0.1,to=5,by=0.25)
par(mfrow=c(4,5))
for(x in steps) {
res = softmax(get.fxs(x),1.0)
barplot(res,names.arg=1:4)
}
dfx.pois.lt
dfemd2.pois.lt
setwd("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/R")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b
par(mfrow=c(1,2)); plot(tmp$discriminator_loss,type="l"); plot(tmp$generator_loss,type="l")
par(mfrow=c(1,2)); plot(df.b$discriminator_loss,type="l"); plot(df.b$generator_loss,type="l")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
par(mfrow=c(1,2)); plot(df.b$discriminator_loss,type="l"); plot(df.b$generator_loss,type="l")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
par(mfrow=c(1,2)); plot(df.b$discriminator_loss,type="l"); plot(df.b$generator_loss,type="l")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); plot(df.b$generator_loss,type="l")
plot(df.b.unif$discriminator_loss,type="l"); plot(df.b.unif$generator_loss,type="l")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); plot(df.b$generator_loss,type="l")
lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.unif$generator_loss,col="red")
df.b.unif
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red");
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
df.b.gr1
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b.gr1
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b.gr1
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b.gr1
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn/results.txt")
df.b.unif = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-unif/results.txt")
df.b.gr1 = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn-gr1/results.txt")
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
df.b.elr = read.csv("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/output/gan-heightmap-ld1000-b-discbn2/results.txt")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.gr1$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.gr1$generator_loss,col="blue")
par(mfrow=c(1,2))
plot(df.b$discriminator_loss,type="l"); lines(df.b.unif$discriminator_loss,col="red"); lines(df.b.elr$discriminator_loss,col="blue")
plot(df.b$generator_loss,type="l"); lines(df.b.unif$generator_loss,col="red"); lines(df.b.elr$generator_loss,col="blue")
setwd("~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/R")
source('~/Desktop/lisa_tmp4_4/nasa_depth2terrain/dcgan/R/raw_plots.R')
